function get_children(n){"use strict";var e={darwin:function(n){return child_process.spawn("pgrep",["-P",n.toString()])},linux:function(n){return child_process.spawn("ps",["-o","pid","--no-headers","--ppid",n.toString()])}};return new Promise(function(r){process.kill(n,"SIGSTOP");var i="darwin"===process.platform?e.darwin(n):e.linux(n),o="";i.stdout.on("data",function(n){o+=n.toString("ascii")}),i.on("close",function(){var n=[];(o.match(/\d+/g)||[]).forEach(function(e){n.push(parseInt(e,10))}),r(n)})})}function get_tree(n){"use strict";return n===process.pid?Promise.resolve({}):new Promise(function(e){get_children(n).then(function(n){0===n.length&&e({});var r={};n.forEach(function(n){r[n]=null}),n.forEach(function(n){get_tree(n).then(function(i){r[n]=i;var o=!0;for(var t in r)null===r[t]&&(o=!1);o&&e(r)})})})})}function genocide(n){"use strict";return"win32"===process.platform?new Promise(function(e){var r=child_process.spawn("taskkill",["/pid",n.toString(),"/T","/F"],{detached:!0});r.on("close",function(){e()})}):get_tree(n).then(function(e){!function r(n,e){if(n!==process.pid){for(var i in e)r(i,e[i]);process.kill(n,"SIGKILL")}}(n,e)})}function seppuku(){"use strict";child_process.spawn(process.argv[0],[__filename,process.pid.toString()],{detached:!0,env:{ELECTRON_RUN_AS_NODE:!0}})}var child_process=require("child_process");require.main===module?genocide(parseInt(process.argv[2],10)):module.exports={genocide:genocide,seppuku:seppuku};